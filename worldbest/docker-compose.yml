version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: worldbest-postgres
    environment:
      POSTGRES_DB: worldbest
      POSTGRES_USER: worldbest
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-worldbest123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - worldbest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U worldbest"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: worldbest-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: worldbest
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-worldbest123}
      MONGO_INITDB_DATABASE: worldbest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - worldbest-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: worldbest-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-worldbest123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - worldbest-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ for job queues
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: worldbest-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: worldbest
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-worldbest123}
      RABBITMQ_DEFAULT_VHOST: worldbest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - worldbest-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: worldbest-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-worldbest}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-worldbest123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - worldbest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx API Gateway
  nginx:
    image: nginx:alpine
    container_name: worldbest-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - worldbest-network
    depends_on:
      - auth-service
      - project-service
      - ai-orchestrator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: ./services/auth/Dockerfile
    container_name: worldbest-auth
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://worldbest:${POSTGRES_PASSWORD:-worldbest123}@postgres:5432/worldbest?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-worldbest123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret}
      PORT: 3001
    ports:
      - "3001:3001"
    networks:
      - worldbest-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Project Service
  project-service:
    build:
      context: .
      dockerfile: ./services/project/Dockerfile
    container_name: worldbest-project
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://worldbest:${POSTGRES_PASSWORD:-worldbest123}@postgres:5432/worldbest?schema=public
      MONGODB_URI: mongodb://worldbest:${MONGO_PASSWORD:-worldbest123}@mongodb:27017/worldbest?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-worldbest123}@redis:6379
      PORT: 3002
    ports:
      - "3002:3002"
    networks:
      - worldbest-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Orchestrator Service
  ai-orchestrator:
    build:
      context: .
      dockerfile: ./services/ai-orchestrator/Dockerfile
    container_name: worldbest-ai
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://worldbest:${POSTGRES_PASSWORD:-worldbest123}@postgres:5432/worldbest?schema=public
      MONGODB_URI: mongodb://worldbest:${MONGO_PASSWORD:-worldbest123}@mongodb:27017/worldbest?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-worldbest123}@redis:6379
      RABBITMQ_URL: amqp://worldbest:${RABBITMQ_PASSWORD:-worldbest123}@rabbitmq:5672/worldbest
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_INDEX: ${PINECONE_INDEX:-worldbest}
      PORT: 3003
    ports:
      - "3003:3003"
    networks:
      - worldbest-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Export Service
  export-service:
    build:
      context: .
      dockerfile: ./services/export/Dockerfile
    container_name: worldbest-export
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://worldbest:${POSTGRES_PASSWORD:-worldbest123}@postgres:5432/worldbest?schema=public
      MONGODB_URI: mongodb://worldbest:${MONGO_PASSWORD:-worldbest123}@mongodb:27017/worldbest?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-worldbest123}@redis:6379
      RABBITMQ_URL: amqp://worldbest:${RABBITMQ_PASSWORD:-worldbest123}@rabbitmq:5672/worldbest
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-worldbest}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-worldbest123}
      PORT: 3004
    ports:
      - "3004:3004"
    networks:
      - worldbest-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Billing Service
  billing-service:
    build:
      context: .
      dockerfile: ./services/billing/Dockerfile
    container_name: worldbest-billing
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://worldbest:${POSTGRES_PASSWORD:-worldbest123}@postgres:5432/worldbest?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-worldbest123}@redis:6379
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      PORT: 3005
    ports:
      - "3005:3005"
    networks:
      - worldbest-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      target: development
    container_name: worldbest-web
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost/api}
      NEXT_PUBLIC_WS_URL: ${WS_URL:-ws://localhost/ws}
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    networks:
      - worldbest-network
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: worldbest-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - worldbest-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: worldbest-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    ports:
      - "3030:3000"
    volumes:
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    networks:
      - worldbest-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  worldbest-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  nginx_cache:
  prometheus_data:
  grafana_data: